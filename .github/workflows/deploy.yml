name: Deploy to ECS

on:
  push:
    branches: [main]

env:
  ECR_REPO: weather-app
  ECS_CLUSTER: weather-app-cluster
  ECS_SERVICE: weather-app-service
  AWS_REGION: ap-south-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Critical for OIDC

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }} -f Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}

      - name: Force ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      # Debugging steps
      - name: Check service status
        run: |
          echo "=== Current Service Status ==="
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Verify deployment
        run: |
          echo "=== Waiting for stabilization ==="
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} || \
          echo "=== Continuing after wait timeout ==="

      - name: Debug failure
        if: failure()
        run: |
          echo "=== FAILURE ANALYSIS ==="
          
          # 1. Get service events
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --query 'services[0].events[?createdAt>=`'"$(date -u -d '1 hour ago' +'%Y-%m-%dT%H:%M:%SZ')"'`]' \
            --region ${{ env.AWS_REGION }}
          
          # 2. Get all task details
          TASK_ARNS=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --query 'taskArns' \
            --output text)
          
          for TASK_ARN in $TASK_ARNS; do
            echo "=== TASK $TASK_ARN ==="
            aws ecs describe-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --tasks $TASK_ARN \
              --query 'tasks[].containers[].{name:name,exitCode:exitCode,reason:reason}' \
              --region ${{ env.AWS_REGION }} \
              --output table
          done
          
          # 3. Get logs from last failed task
          LAST_TASK=$(echo "$TASK_ARNS" | awk '{print $NF}')
          aws logs tail /aws/ecs/weather-app \
            --region ${{ env.AWS_REGION }} \
            --log-stream-names "ecs/${{ env.ECS_SERVICE }}/${LAST_TASK##*/}"