name: deploy
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # NOTE: For production, this job should have a 'needs: test' dependency on ci.yml
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      IMAGE_NAME: weather-app
      ECR_REPO: weather-prod 
    steps:
      - uses: actions/checkout@v4
      
       # 1. Build app image
      - name: Build app image
        run: |
          cd app
          docker build -t $IMAGE_NAME:$GITHUB_SHA .

      # 2. Configure AWS credentials
      - name: Configure AWS credentials (keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. ECR Login/Push
      - name: Login to ECR and Push image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ env.ECR_REPO }}"
          
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPO_URI
          
          docker tag $IMAGE_NAME:$GITHUB_SHA $REPO_URI:$GITHUB_SHA
          docker tag $IMAGE_NAME:$GITHUB_SHA $REPO_URI:latest
          
          docker push $REPO_URI:$GITHUB_SHA
          docker push $REPO_URI:latest
          
          echo "IMAGE_URI=$REPO_URI:$GITHUB_SHA" >> $GITHUB_ENV
          
      # 4. Terraform Init and Apply (This step confirms your infrastructure is ready)
      - name: Terraform Init and Apply
        run: |
          terraform -chdir=infra init
          terraform -chdir=infra apply -auto-approve

      # 5. Deploy new Task Definition and update ECS Service
      # This step is the source of the JSON error. We are making it robust.
      - name: Deploy new Task Definition and update ECS Service
        id: ecs_deploy
        run: |
          # 1. Retrieve essential Terraform Outputs
          CLUSTER_NAME=$(terraform -chdir=infra output -raw ecs_cluster_name)
          SERVICE_NAME=$(terraform -chdir=infra output -raw ecs_service_name)
          IMAGE_URI="$IMAGE_URI" # Get the ECR URI from the environment variables
          
          # Get the ARN of the currently running Task Definition
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].taskDefinition" --output text)
          echo "Current Task Definition ARN: $TASK_DEF_ARN"

          # --- FIX: Use temporary file for clean JSON passing ---
          
          # 2. Get the current Task Definition JSON and save it to a temp file
          aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json > task-def-base.json
          
          # 3. CRITICAL JQ FIX: Modify the JSON. 
          # Update the image, and aggressively remove ALL rejected metadata fields (like .requiresAttributes, .registeredAt, .registeredBy)
          jq --arg IMAGE_URI "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE_URI | del(.taskDefinitionArn, .revision, .status, .compatibilities, .requiresAttributes, .registeredAt, .registeredBy, .version, .arn)' \
            task-def-base.json > new-task-definition.json
          
          # 4. Register the new definition from the clean file and capture the ARN
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "Registered new Task Definition: $NEW_TASK_DEF"

          # 5. Force Service Deployment
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF \
            --force-new-deployment
            
          # 6. Wait for the new deployment to stabilize (Ensures pipeline doesn't exit early)
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME

      # 6. Smoke Test
      - name: Smoke test /health
        run: |
          ALB_DNS=$(terraform -chdir=infra output -raw alb_dns_name)
          curl -fsS "http://$ALB_DNS/health"
          echo "Deployment successful! Application available at: http://$ALB_DNS"
