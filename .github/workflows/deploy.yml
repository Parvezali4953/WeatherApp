name: deploy
on:
  push:
    branches: [ "main" ]
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      IMAGE_NAME: weather-app
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build app image
        run: |
          cd app
          docker build -t $IMAGE_NAME:$GITHUB_SHA .
      - name: Debug OIDC token claims
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref:   ${{ github.ref }}"
          echo "Repo:  ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          
          # Request OIDC token and print claims
          OIDC_TOKEN=$(curl -sLS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value')
          echo "$OIDC_TOKEN" | awk -F. '{print $2}' | base64 -d 2>/dev/null | jq .

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::577638355583:role/weather-prod-gh-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/weather-prod"
          docker tag $IMAGE_NAME:$GITHUB_SHA $REPO_URI:latest
          docker tag $IMAGE_NAME:$GITHUB_SHA $REPO_URI:$GITHUB_SHA
          docker push $REPO_URI:latest
          docker push $REPO_URI:$GITHUB_SHA
          echo "REPO_URI=$REPO_URI" >> $GITHUB_ENV

      - name: Terraform init/apply
        working-directory: infra
        run: |
          terraform init -reconfigure
          terraform apply -auto-approve \
            -var="region=${AWS_REGION}" \
            -var="project=weather" \
            -var="environment=prod" \
            -var="container_port=5000" \
            -var="desired_count=1" \
            -var="container_image=${REPO_URI}:latest"

      - name: Smoke test /health
        run: |
          ALB=$(terraform -chdir=infra output -raw alb_dns_name)
          curl -fsS "http://$ALB/health"
          echo "OK"
