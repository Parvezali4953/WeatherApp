name: deploy-fast
on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      IMAGE_NAME: weather-app
      INFRA_DIR: infra
      
    steps:
      - uses: actions/checkout@v4

      # 1. Build and Tag App Image
      - name: Build app image
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          cd app
          docker build -t $IMAGE_NAME:$GITHUB_SHA .

      # 2. Configure AWS
      - name: Configure AWS credentials (keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Login and Push to ECR
      - name: Login to ECR and Push image
        uses: aws-actions/amazon-ecr-login@v2
      - run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO_URI="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/weather-prod"
          
          # Use unique SHA tag for reliability, and export the full URI
          IMAGE_URI="$REPO_URI:$GITHUB_SHA"
          
          docker tag $IMAGE_NAME:$GITHUB_SHA $IMAGE_URI
          docker push $IMAGE_URI
          
          # Export the full URI for the next step
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          
      # 4. Terraform Setup (Needed only to read output values from state)
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 5. FAST ECS Deployment (The speed-up using AWS CLI)
      - name: Update Task Definition and Service
        run: |
          set -e # Exit immediately if any command fails

          # Use Terraform to quickly read the cluster and service names from state
          terraform -chdir=${INFRA_DIR} init -reconfigure
          CLUSTER_NAME=$(terraform -chdir=${INFRA_DIR} output -raw ecs_cluster_name)
          SERVICE_NAME=$(terraform -chdir=${INFRA_DIR} output -raw ecs_service_name)
          
          echo "Deploying to cluster: $CLUSTER_NAME, service: $SERVICE_NAME"
          
          # 1. Get the current Task Definition ARN from the running service
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].taskDefinition" --output text)
          
          # 2. Extract, Update Image URI, and Register a NEW Task Definition Revision
          NEW_TASK_DEF_ARN=$(
            aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json | \
            jq --arg IMAGE_URI "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' | \
            # SYNTAX FIX: Remove ALL administrative fields that prevent registration.
            # This is the most comprehensive list to ensure valid JSON input.
            jq 'del(.taskDefinitionArn, .revision, .status, .compatibilities, .requiresAttributes, .registeredAt, .deregisteredAt, .placementConstraints, .ephemeralStorage)' | \
            aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.taskDefinitionArn' --output text
          )
          
          echo "Registered new Task Definition: $NEW_TASK_DEF_ARN"
          
          # 3. Update the ECS Service to use the NEW Task Definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

          # 4. Wait for the service to be stable (Zero-Downtime Check)
          echo "Waiting for service to be stable..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME
          
          echo "Deployment successful and stable!"
